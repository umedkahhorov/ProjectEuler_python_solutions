import time
import math

"""
The sequence of triangle numbers is generated by adding the natural numbers.
The n-th triangle number is given by: n * (n + 1) / 2
Factors of the first seven triangle numbers: 
28: 1, 2, 4, 7, 14, 28 --> 6 divisors
What is the value of the first triangle number to have over five hundred divisors?
"""

def triangle_nth(n):
    return n * (n + 1) // 2

def list_factors(n):
    factors = set()
    sqrt_n = int(math.sqrt(n))
    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            factors.add(i)
            factors.add(n // i)
    return len(factors)

def compute(divisors):
    ans = 0
    i = 1
    while ans < divisors:
        n = triangle_nth(i)
        ans = list_factors(n)
        i += 1
    return n

if __name__ == "__main__":
    divisors = 500
    t1 = time.time()
    ans = compute(divisors)
    t2 = time.time()
    print("Value of the first triangle number with over", divisors, "divisors:", ans)
    print("Time taken:", t2 - t1, "seconds")
