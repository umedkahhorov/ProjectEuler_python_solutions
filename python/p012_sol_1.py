import numpy as np
import time 
import math
import multiprocessing
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the th triangle number would be 1+2+3+4+5+6+7=28,  
factors of the first seven triangle numbers: 28: 1,2,4,7,14,28 --> 5
What is the value of the first triangle number to have over five hundred divisors?
correct_answer = 76576500
"""

def triangle_nth(n):
    sum = n * (n+1) / 2
    return int(sum)
#def list_factors_1(n):
#    factors = [i for i in range(1,n+1) if n%i==0]
#    return factors
def list_factors(n):
    factors = set()
    for i in range(1,int(math.sqrt(n))+1):
        if n%i==0:
            factors.add(i)
            factors.add(n//i)
    return len(factors)
def compute(divisors,start,end,result_queue):
    ans = 0
    i = start
    while ans < divisors:
        n = triangle_nth(i)
        ans = list_factors(n)
        i +=1
    result_queue.put(n)
if __name__ == "__main__":
    #correct_answer = 227750
    #t1 = time.time()
    #n_sum = triangle_nth(correct_answer)
    #ans = list_factors(1000)
    #t2 = time.time()
    #print (ans,t2-t1)
    divisors = 500
    num_processes = 4
    t1 = time.time()
    result_queue = multiprocessing.Queue()
    processes = []
    for i in range(num_processes):
        start = i * (divisors//num_processes) + 1
        end = (i+1) * (divisors//num_processes) + 1
        process = multiprocessing.Process(target=compute,
                                          args=(divisors,start,end,result_queue))
        processes.append(process)
        process.start()
    for process in processes:
        process.join()

    max_result = 0
    while not result_queue.empty():
        result = result_queue.get()
        max_result = max(max_result,result)
    t2 = time.time()
    print("Value of the first triangle number with over", 
          divisors, "divisors:", max_result)
    print("Time taken:", t2 - t1, "seconds")




